<%
unless defined?(palette_clones_input_width) && !palette_clones_input_width.nil?
  palette_clones_input_width = true
end
class_name = record.class.name.gsub(/.*::/, '').underscore.downcase
text_field_id = "#{associated_class_name}_autocomplete_input"
palette_id = "#{associated_class_name}_autocomplete_palette"
hidden_field_id = "#{class_name}_#{column.association_foreign_key}"
associated = record.send(column.name)
if associated
  associated_id = associated.id
else
  associated_id = nil
end
autocompleter_js_var = "#{associated_class_name}_autocompleter"
column_view = AdminAssistant::BelongsToColumn::View.new(column, self)
%>
<%= text_field_tag(
  text_field_id, column_view.assoc_field_value(associated), :id => text_field_id
) %>
<%= hidden_field_tag(
  "#{class_name}[#{column.association_foreign_key}]", associated_id,
  :id => hidden_field_id
) %>
<div id="<%= palette_id %>" class="autocomplete_palette" style="display:none"></div>

<div id="clear_<%= associated_class_name %>_link" style="display:none; padding: 5px">
<%= link_to_function(
  "Clear #{associated_class_name}", "#{autocompleter_js_var}.clearSelected()"
) %>
</div>

<%
auth_token = if protect_against_forgery?
  form_authenticity_token
else
  ''
end
%>
<script type="text/javascript">
var options = {parameters: "authenticity_token=<%= auth_token %>"};
<% unless palette_clones_input_width %>
options.onShow = function(element, update){
  if(!update.style.position || update.style.position=='absolute') {
    update.style.position = 'absolute';
    Position.clone(element, update, {
      setHeight: false,
      setWidth: false,
      offsetTop: element.offsetHeight
    });
  }
  Effect.Appear(update,{duration:0.15});
};
<% end %>
var <%= autocompleter_js_var %> = new AdminAssistant.RestrictedAutocompleter(
  "<%= associated_class_name %>",
  "<%= hidden_field_id %>",
  "/<%= controller.controller_path %>/autocomplete_<%= associated_class_name %>",
  <%= select_options[:include_blank] %>,
  options
);
</script>

